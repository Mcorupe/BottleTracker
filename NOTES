^**^^**^**^*^^*^**^*^*^**^*^*^*^**^^**^^**^**^*^^*^**^*^*^**^*^*^*^**^^**^^**^**^*^^*^**^*^*^**^*^*^*^**^
^**^^**^**^*^^*^**^*^*^**^*^*^*^**^^**^^**^**^*^^*^**^*^*^**^*^*^*^**^^**^^**^**^*^^*^**^*^*^**^*^*^*^**^
^**^^**^^**^**^*^^*^**^*^*^**^*^*^*^**^ DO THIS STUFF*^^*^*^**^*^*^^*^**^*^*^*^**^^*^**^^**^*^**^*^**^*^*
^**^^**^**^*^^*^**^*^*^**^*^*^*^**^^**^^**^**^*^^*^**^*^*^**^*^*^*^**^^**^^**^**^*^^*^**^*^*^**^*^*^*^**^
^**^^**^**^*^^*^**^*^*^**^*^*^*^**^^**^^**^**^*^^*^**^*^*^**^*^*^*^**^^**^^**^**^*^^*^**^*^*^**^*^*^*^**^

----- MAIN FUNCTIONAL STUFF ------------
[X] SignIn signUP pages need to be made
[X] SignIN and signUP pages need to be linked with firestore. yay
[] Route guarding
[] Forgot password
[] Reset password
[] Firebase Security Rules --- DONE BUT NEEDS TESTING CUZ I BROKE STUFF. HA ----
[] Talk about re-writing file names. we have form.js/Form.js idk i might just be slow.


---FILTERING---
[] use something for the grabTable to limit amount showed.
[] filter() pagination the table


---HEADER---
conditionally render these
[] signedIN links
[] signedOUT links

---STYLING---
[] signUP box positioning
[*] theme dark/light (did i maybe do it almost?... i moved the theme button to the layout since thats where the background color was?)
[] add some svgs
[] center <btn> SignUP </btn>
[] center <btn> Login </btn>
[] make universal spinner component

--- TESTS ----
[] signUP
[] SignIN
[] sightout
[] rendering?
[] form
  [] input
  [] type
  [] amount
  [] submit
[] table



----- Problems ----------
not receiving userObject until its too late
not sending the correct data to fetch the table
cannot submit the form




--didnt work---
//header.test.js

import React from "react";
import renderer from "react-test-renderer";

import  Header  from "../../components/header.js";

describe("Header", () => {
  it("renders correctly", () => {
    const tree = renderer.create(<Header />).toJSON();

    expect(tree).toMatchSnapshot();
  });
});



//Form.test.js
made a 2nd one trying to test the data coming in. didnt work :(
 test("renders feeding data", async () => {
    const testFeeding = {
      name: "tester",
      type: "milk",
      amount: "0"
    };

    jest.spyOn(global, "fetch").mockImplementation(() =>
      Promise.resolve({
        json: () => Promise.resolve(testFeeding)
      })
    );
    await act(async () => {
      render(<form/>);
    },
  })












